AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template AutoScalingMultiAZSample: Create a
  multi-az, load balanced and Auto Scaled sample web site running on an Apache
  Web Server with PHP. The application is configured to span all Availability
  Zones in the region. The instances are load balanced with a simple health check against
  the default web page. 
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.  
  PuppetServerIP:
    Description: ' The IP address range of the Puppet server. This enables the instance to contact Puppet server.'
    Type: String
    MinLength: '7'
    MaxLength: '15'
    Default: 0.0.0.0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP address of the form x.x.x.x.
  PuppetServerHostname:
    Description: Puppet Server Hostname
    Type: String
    Default: puppet.hostname
    ConstraintDescription: Must be a valid puppet hostname.      
Resources:
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '3'
      LoadBalancerNames:
        - !Ref ElasticLoadBalancer
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: 'ami-5a2c3339'
      KeyName: mysydneykeypair
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets All '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - ''
      SecurityGroups:
        - !Ref InstanceSecurityGroup
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
            - httpconfig
            - puppetconfig
            - dbhostname
        ConfigureSampleApp:
          packages:
            yum:
              puppet: []
          files:

            /etc/httpd/conf.d/error.conf:
              content: ErrorDocument 404 /custom_404.html
              mode: '000644'
              owner: root
              group: root
            /var/www/html/custom_404.html:
              content: ' Recheck your URL'
              mode: '000644'
              owner: root
              group: root
        httpconfig:
          commands:
            configupdate:
              command: echo "$MAGIC" >> /etc/httpd/conf/httpd.conf
              env:
                MAGIC: Listen 443
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/httpd/conf/httpd.conf
        puppetconfig:
          commands:
            puppetagentconf:
              command: echo "server = $MAGIC" >> /etc/puppet/puppet.conf
              env:
                MAGIC: !Ref PuppetServerHostname
            hostsconf:
              command: echo "$MAGIC1 $MAGIC2" >> /etc/hosts
              env:
                MAGIC1: !Ref PuppetServerIP
                MAGIC2: !Ref PuppetServerHostname
        dbhostname:
              command: Fn::Sub
                sed -i 's/dbname/${DataBase.Endpoint.Address}/g' index.php
              cwd: /var/www/html
  ElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      AvailabilityZones: !GetAZs ''
      Listeners:
        - LoadBalancerPort: '80'
          Protocol: HTTP
          InstancePort: '80'
          InstanceProtocol: HTTP
        - LoadBalancerPort: '443'
          Protocol: HTTPS
          InstancePort: '443'
          InstanceProtocol: HTTPS
          SSLCertificateId: 'arn:aws:iam::878452377477:server-certificate/elb2-x509'
      HealthCheck:
        Target: 'HTTPS:443/index.php'
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '10'
      CrossZone: 'true'
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP and HTTPS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  DataBase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: 5
      StorageType: gp2
      DBInstanceClass: db.t2.micro
      DBName: tonystan
      Engine: MySQL
      DBSecurityGroups:
       - Ref: DBSecurityGroup
      MasterUsername: tonystan
      MasterUserPassword: tonystan
  DBSecurityGroup:
    Type: 'AWS::RDS::DBSecurityGroup'
    Properties:
      GroupDescription: Frontend Access
      DBSecurityGroupIngress:
        EC2SecurityGroupName:
          Ref: InstanceSecurityGroup
Outputs:
  WebsiteURL:
    Value: !GetAtt 
      - ElasticLoadBalancer
      - DNSName
    Description: Elastic Load Balancer Domain
